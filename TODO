Prio's:
- store clockkleuren to flash
  - Check ook of de clockconfig niet wordt ingeladen VOORDAT de configuratie correct is ingelezen vanuit flash
  - Splits apicall voor clock naar switchen en updaten van kleurconfig
- bouw release


==================================

Prio:
[ ] - boot -> check configured? Nee -> state = SETUP_WIFI
      - currentApp = blink 1 LED rood
      - /api/config -> {status: uninitialized}
[ ] 
[ ] - klok-pagina uitbreiden met settings:
[x]   - Het is: kleur
[x]   - tussenwoorden: kleur
[x]   - uur: kleur
[ ]   - transition: none, fade, ?
[ ]   - Tijdzone via: https://github.com/nayarsystems/posix_tz_db


# Fix flashsize:
vVersion 1.0 of the Arduino IDE introduced the F() syntax for storing strings in flash memory rather than RAM. e.g.
--> Serial.println(F("This string will be stored in flash memory"));


Features
[ ] - Clock
      - kleur
        - hoekjes
        - uren
        - minuten
      - effect
        - minuten aan/uit
        - overgang letters
      - autodim
        - op tijd
        - lichtsensor

[ ] - HTTP
      - Pagina met settings
        - ntp-server
      - Status
        - last update van ntp-server
        - huidige tijd
      - remap display X,Y
      - Draw on display
      - Set mode
        - klok
      - Factory reset?


[ ] - Games
      - Controller geabstraheerd
        - 1 implementatie: PS4 controller
        - 1 implementatie: UDP ?

[ ] - Buttons
    - dev mode
    - klok mode
    - switch color


[ ] - Smart
    - kleur in te stellen mbv Home Assistant
    - Werkt niet met Wifi standaard uit?

[v] - OTA-logger
    - UDP ?
    - via #define in/uit te schakelen

Bootanimation -> Clock

Triggers:
- http (draw, ?) -> show drawing
- 5 min idle -> clock




===================
Classes

= Display
+ drawLine(...)
+ drawPixel(...)
+ clear()
+ setMaxBrightness()

Setting (struct)
union type class met een int/bool/string/enum waarde

SettingStorage - eerst in-memory, later SPIFFS
+ getSetting(app, name) -> Setting
+ setSetting(app, name, Setting)

= App
- &Display
+ init(Display, SettingStorage)
+ handleInput(inputEvent)
+ handle() (= vanuit main-loop)

= Clock : App
settings: STYLE, TRANSITION-STYLE, COLORMODE, COLOR_HOUR, COLOR_HET_IS, COLOR_WORDS, COLOR_MINUTES
- NTPClient
- time_t currentTime

= Game : App


= Tetris : Game
- score
- blokje
- speed
- positie van vallend blokje
- tijd voordat blokje een stap verder valt / tijd voor animatie
+ handle() ->
  state: falling -> check tijd -> update positie -> check collision -> check complete lines -> start animation
  state: animation -> check tijd -> update animation / end animation -> start nextblokje
  state: nextblokje -> 

= InputDevice
+ InputDevice(eventPublisher)
+ handle() (= vanuit main-loop) / kan dit een aparte task zijn?

= PS4Controller : InputDevice
- listen for input / interrupt -> eventPublisher.publishEvent(...)
- listen for connection / connection lost -> eventPublisher.publishEvent(...)
+ rumble(ms)
+ color()

??? Menu als App ??

main:
- initDisplay
- initWifi / start WifiManager
- initWebserver
- inputs[] = {H/W buttons, webinterface, PS4 controller}
- startApp(clock(display, settingStorage))